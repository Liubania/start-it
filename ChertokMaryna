--Practice 1--
--1. Show all info about CompanyName and Address from the Customers table--

select company_name
, Address 
from Customers

--2. Show all info about CompanyName and ContactPerson from the Suppliers table.--

select company_name 
, contact_name  
from Suppliers

--3. Show all info about ProductName and UnitPrice from the Products table.--

select product_name  
, unit_price 
from Products

--4. Show all info about LastName, FirstName, BirthDate and HireDate of Employees.--

select Last_name  
, first_name
, birth_date
, hire_date  
from Employees

--Practice 2--

--1. Show all info about the employee with ID 8.--

select * 
from Employees
where employee_id =8

--2. Show the list of first and last names of the employees from London.--

select first_name
, last_name
from Employees
where city  in ('London') 


--3. Show the list of first, last names and ages of the employees whose age is greater than 55.--

select e.first_name
, e.last_name
, EXTRACT (year FROM age(e. birth_date))  
from employees e 
where EXTRACT (year FROM age(e. birth_date)) > '55'

--4. Show the list of products with the price between 10 and 50.--

select product_name  
, unit_price 
from Products
where unit_price between '10' and '50'

--Practice 3--

--1. Show the list of products which names start form ‘N’ and average price is greater than 50.--

select p.product_name  
, p.unit_price 
from Products p
where product_name like 'N%' and unit_price >'50'

--2. Show the total number of employees which live in the same city.--

select city 
, count (employee_id) as quantity
from Employees
group by city

--3.Show the list of suppliers which name begins with letter ‘A’  and are situated in London.--

select company_name 
from Suppliers
where company_name like 'A%' and city  in ('London')

--4. Show the list of first, last names and ages of the employees whose age is greater than average age of all employees. The result should be sorted by last name.--

select first_name, last_name, EXTRACT (year FROM age(birth_date))
from employees 
where EXTRACT (year FROM age(birth_date)) > (select avg(EXTRACT (year FROM age(birth_date)))from employees)
ORDER by last_name

--5.Calculate the count of customers from Mexico and contact signed as ‘Owner’.--

select Count (customer_id) as quantity
from Customers
where country in ('Mexico') and contact_title in ('Owner')

--Practice 4--  

--1. Write a query to get most expense and least expensive Product list (name and unit price).--

select product_name as most_expense_products
, unit_price 
from Products
order by unit_price desc
limit '10'

select product_name as least_expensive_products
, unit_price 
from Products
order by unit_price 
limit '10'

--2. Write a query to get Product list (name, unit price) of above average price.--

select product_name
, unit_price 
from Products
where unit_price > (select avg(unit_price) from Products)
order by unit_price

--3.Write a query to get Product list (name, unit price) of ten most expensive products.--

select product_name
, unit_price 
from Products
order by unit_price desc
limit '10'

--4.For each employee that served the order (identified by EmployeeID), calculate a total Freight--

select employee_id , sum(freight)::numeric (10,2) as total_freight
from orders
group by employee_id
order by employee_id 


--Practice 5--  

--1. Calculate the greatest, the smallest and the average age among the employees from London.--

select max (EXTRACT (year FROM age(birth_date))) as max_age
, min (EXTRACT (year FROM age(birth_date))) as min_age
, avg (EXTRACT (year FROM age(birth_date))) ::numeric (2,0) as average_age
from Employees
where city in ('London')

--2. Calculate the greatest, the smallest and the average age of the employees for each city--

select city
, max (EXTRACT (year FROM age(birth_date))) as max_age
, min (EXTRACT (year FROM age(birth_date))) as min_age
, avg (EXTRACT (year FROM age(birth_date))) ::numeric (2,0) as average_age
from Employees
 group by city

 --3. Show the list of cities in which the average age of employees is greater than 60 (the average age is also to be shown)--
 
select city
, avg (EXTRACT (year FROM age(birth_date))) ::numeric (2,0) as average_age
from Employees
group by city
having  avg (EXTRACT (year FROM age(birth_date))) >60
order by average_age

--4. Show the first and last name(s) of the eldest employee(s).--
--?????--

select first_name
, last_name
from Employees
order by EXTRACT (year FROM age(birth_date)) desc
limit 1

--5.Show first, last names and ages of 3 eldest employees.--

select first_name
, last_name
, EXTRACT (year FROM age(birth_date)) as age
from Employees
order by EXTRACT (year FROM age(birth_date)) desc
limit 3


--HOMEWORK--

--1.Write a query to get Product name and quantity/unit.-- 


select product_name
, quantity_per_unit
from Products

--2. Write a query to get current Product list (Product ID and name). --

select product_ID
, product_name
from Products
where units_in_stock > 0


--3. Write a query to get discontinued Product list (Product ID and name). --

select product_ID
, product_name
, discontinued
from Products
where discontinued  = 1

--4. Write a query to get most expense and least expensive Product list (name and unit price). --

select product_name 
, unit_price 
from Products
order by unit_price desc
limit '10'

select product_name 
, unit_price 
from Products
order by unit_price 
limit '10'

--5. Write a query to get Product list (id, name, unit price) where current products cost less than $20. --

select product_id
, product_name 
, unit_price 
from Products
where  unit_price  > 20

--6. Write a query to get Product list (id, name, unit price) where products cost between $15 and $25.-- 

select product_id
, product_name 
, unit_price 
from Products
where  unit_price  between '15' and '25'

--7. Write a query to get Product list (name, unit price) of above average price. --

select product_name 
, unit_price 
from Products
where unit_price > (select avg(unit_price) from Products)
order by unit_price

--8. Write a query to get Product list (name, unit price) of ten most expensive products.-- 

select product_name 
, unit_price 
from Products
order by unit_price desc
limit '10'

--9. Write a query to count current and discontinued products. --

select count (product_id) as current_products 
from Products
where units_in_stock >'0'

select count (product_id) as discontinued_products
from Products
where discontinued='1'
